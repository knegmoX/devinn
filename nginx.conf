# Nginx configuration for AI笔记DevInn static deployment
# Replace 'your-domain.com' with your actual domain name

server {
    listen 80;
    server_name d.loov.cc www.d.loov.cc;
    
    # Redirect HTTP to HTTPS (recommended for production)
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name d.loov.cc www.d.loov.cc;
    
    # SSL Configuration (you'll need to obtain SSL certificates)
    # ssl_certificate /path/to/your/certificate.crt;
    # ssl_certificate_key /path/to/your/private.key;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Document root - point this to your static files directory
    root /var/www/devinn/out;
    index index.html;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }
    
    # Handle Next.js static files
    location /_next/static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }
    
    # API routes - proxy to a backend service if needed
    # Note: Since we're using static export, API routes won't work directly
    # You'll need to implement these endpoints in a separate backend service
    location /api/ {
        # Option 1: Return a message indicating API is not available in static mode
        return 503 '{"error": "API endpoints require a backend service", "message": "Please implement API endpoints in a separate backend service"}';
        add_header Content-Type application/json;
        
        # Option 2: Proxy to a backend service (uncomment and configure as needed)
        # proxy_pass http://your-backend-service:3001;
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection 'upgrade';
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        # proxy_cache_bypass $http_upgrade;
    }
    
    # Handle client-side routing (SPA)
    location / {
        try_files $uri $uri/ $uri.html /index.html;
    }
    
    # Handle specific routes
    location /demo {
        try_files $uri $uri/ /demo/index.html;
    }
    
    location /notes {
        try_files $uri $uri/ /notes/create/index.html;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /var/www/devinn/out;
    }
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
    }
    
    # Logging
    access_log /var/log/nginx/devinn_access.log;
    error_log /var/log/nginx/devinn_error.log;
}

# Optional: HTTP-only configuration for development/testing
# server {
#     listen 80;
#     server_name your-domain.com www.your-domain.com;
#     
#     root /var/www/devinn/out;
#     index index.html;
#     
#     location / {
#         try_files $uri $uri/ $uri.html /index.html;
#     }
#     
#     location /api/ {
#         return 503 '{"error": "API endpoints require a backend service"}';
#         add_header Content-Type application/json;
#     }
# }
